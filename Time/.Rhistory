glink <- paste0("https://docs.google.com/spreadsheets/",
"d/e/2PACX-1vQrgIzP3_8Fbn7I7kiwKuH8aYPzIRYDXqMj",
"AIJo9ejpN902Yzv5Gqetbq3QX5DqjOddVT3caxxftuii/pub?",
"gid=343744476&single=true&output=csv")
times <- read.delim(glink, header = T, sep = ",")
times$Date <- mdy(times$Date)
times$Start <- hms::as_hms(lubridate::parse_date_time(times$Start, "%I:%M %p"))
times$End <- hms::as_hms(lubridate::parse_date_time(times$End, "%I:%M %p"))
times$project_duration <- (times$End - times$Start)
work_duration_day <- 8 * 60 * 60 # h * m * s = s
work_duration_week <- work_duration_day * 5
work_week_startdate <- seq(
as_date(min(times$Date)), as_date(max(times$Date)), by = "7 days"
)
df_all <- data.frame(Date = seq(work_week_startdate[[1]],
work_week_startdate[[1]] + 4, by = "day"))
for (i in 2:length(work_week_startdate)){
df <- data.frame(Date = seq(work_week_startdate[[i]],
work_week_startdate[[i]] + 4, by = "day"))
df_all <- rbind(df_all, df)
}
df_all <- df_all %>%
mutate(time_day = as.integer(work_duration_day))
setDT(times)
setDT(df_all)
df <- times[df_all, on = "Date"] # Merge to DF
df$project_duration[which(is.na(df$project_duration))] <- 0
View(df)
# Packages
require(pacman)
pacman::p_install("dplyr", "lubridate", "DT")
pacman::p_install(c("dplyr", "lubridate", "DT"))
df %>%
group_by(Job_Category) %>%
summarise(sum(project_duration))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(sum(project_duration))
pacman::p_install(c("dplyr", "lubridate", "data.table", "ggplot2"))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(Date, t)) + geom_point()
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area, Date) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(Date, t)) + geom_point()
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(Date = Date, t = sum(project_duration)) %>%
ggplot(aes(Date, t)) + geom_point()
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(t)) + geom_point()
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(t)) + geom_bar()
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(t)) + geom_bar(stat = "identity")
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(t)) + geom_bar(stat = "identity", y = t)
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(t)) + geom_bar(stat = "identity", aes(y = t))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(DataScience_Anaconda_Survey_TimeSpentOn_Area)) + geom_bar(stat = "identity", aes(y = t))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t), col = DataScience_Anaconda_Survey_TimeSpentOn_Area)
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, fill = DataScience_Anaconda_Survey_TimeSpentOn_Area))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, fill = DataScience_Anaconda_Survey_TimeSpentOn_Area))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t, fill = "white"))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t), fill = "white")) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t)), fill = "white") +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area, fill = "white"))
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white")
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") %>% theme(legend.position = element_blank())
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") %>% theme(legend.position = element_blank())
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") %>% theme(legend.position = "none")
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") %>% theme(legend.position = "none")
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") + theme(legend.position = "none")
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") + theme(legend.position = "none")
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t/3600, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") + theme(legend.position = "none")
df %>%
group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
summarise(t = sum(project_duration)) %>%
na.exclude() %>%
ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
fill = "white") + theme(legend.position = "none")
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(sum(project_duration))
class(df$Primary_Venn_Class)
toupper(df$Primary_Venn_Class)
df$Primary_Venn_Class[70,]
df$Primary_Venn_Class[,70]
df$Primary_Venn_Class[[70]]]
df$Primary_Venn_Class[[70]]]
df$Primary_Venn_Class[[70]]
df$Primary_Venn_Class[70,]
df$Primary_Venn_Class[,70]
df$Primary_Venn_Class[1,]
df[1,]
df[70,]
df$Primary_Venn_Class <- toupper(df$Primary_Venn_Class)
df %>%
group_by(Job_Category) %>%
summarise(sum(project_duration))
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(sum(project_duration))
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(sum(project_duration/360))
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(t = sum(project_duration),
hours = as.numeric(t)/360)
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(t = sum(project_duration),
hours = numeric(t)/360)
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(t = sum(project_duration),
hours = numeric(t)/360)
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(t = sum(project_duration),
hours = as.numeric(t)/360)
# df %>%
#   group_by(DataScience_Anaconda_Survey_TimeSpentOn_Area) %>%
#   summarise(t = sum(project_duration)) %>%
#   na.exclude() %>%
#   ggplot(aes(reorder(DataScience_Anaconda_Survey_TimeSpentOn_Area, t))) +
#   geom_bar(stat = "identity", aes(y = t/360, col = DataScience_Anaconda_Survey_TimeSpentOn_Area),
#            fill = "white") + theme(legend.position = "none")\
df %>%
group_by(Primary_Venn_Class) %>%
summarise(t = sum(project_duration),
hours = as.numeric(t)/360)
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(day = floor_date(Date, "day")) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -day) %>%
ggplot(aes(day, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(day = floor_date(Date, "day")) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -day) %>%
ggplot(aes(day, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(Day = floor_date(Date, "day")) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -day) %>%
ggplot(aes(day, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(day = floor_date(Date, "day")) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -day) %>%
ggplot(aes(day, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(project_duration) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -day) %>%
ggplot(aes(day, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(Project) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -Project) %>%
ggplot(aes(day, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(Project) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -Project) %>%
ggplot(aes(Project, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# How much time have I had leftover each day?
# How would this line chart look with 0 as the minimum time (ignore OT)?
df %>%
group_by(Project) %>%
summarise(prj_time = sum(as.numeric(project_duration)),
# non_prj_time = as.numeric(work_duration_day - prj_time),
# tot_time = (prj_time + non_prj_time), # = work_duration_day
# project_time = work_duration_day - non_prj_time
) %>% # prj_time and project_time should overlay exactly on plot
filter(prj_time >= 0) %>%
gather(key, value, -Project) %>%
ggplot(aes(Project, (value/3600))) +
geom_col(position = "stack", fill = "light blue", col = "black", alpha = 0.75) +
geom_hline(yintercept = df.stats$med, lty = "dashed") + coord_flip() +
labs(x = "Day", y = "Hours", title = "Title", subtitle = "subtitle") +
theme_classic() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
shiny::runApp('C:/Users/Zachary.Palmore/GitHub/misc/Mortality')
library(installr)
install.packages("installr")
library(installr)
updateR()
library(installr)
install.packages("installr")
df <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSC4Y0ZRfzQLbwILHYwOJz3srSZRf3m-3V3srZ5JDfx3giq-rzE9qswEy-upWXmUa5o7poth9IENXYg/pub?output=csv")
View(df)
df$Date >= "7/14/2022"
df[df$Date >= "7/14/2022"]
df$Date[df$Date >= "7/14/2022"]
df$Date[df$Date > 7/14/2022]
df$GnatCount[df$Date > 7/14/2022]
df$GnatCount[df$Date == 7/14/2022]
df[df$Date == 7/14/2022]
df[df$Date == "7/14/2022"]
df[,df$Date == "7/14/2022"]
df[df$Date == "7/14/2022",]
df[df$Date >= "7/14/2022",]
df[df$Date > "7/14/2022",]
class(df$Date)
as.Date(df$Date)
library(lubridate)
df$Date
lubridate::mdy(df$Date)
df[lubridate::mdy(df$Date) > "7/14/2022",]
df$Date <- lubridate::mdy(df$Date)
df$Date
df[df$Date > "2022-07-14",]
df[df$Date >= "2022-07-14",]
df <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSC4Y0ZRfzQLbwILHYwOJz3srSZRf3m-3V3srZ5JDfx3giq-rzE9qswEy-upWXmUa5o7poth9IENXYg/pub?output=csv")
class(df$Date)
library(lubridate)
df$Date
df[lubridate::mdy(df$Date) >= "2022-07-14",]
as.numeric(df$GnatCount)
df$GnatCount <- as.numeric(df$GnatCount)
df
df$CupID
df$CupID <- as.factor(df$CupID)
df
df$Date <- lubridate::mdy(df$Date)
df
df <- read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSC4Y0ZRfzQLbwILHYwOJz3srSZRf3m-3V3srZ5JDfx3giq-rzE9qswEy-upWXmUa5o7poth9IENXYg/pub?output=csv")
mdy_hm(paste(df$Date, df$Time))
mdy_hm(paste(df$Date))
mdy_hm(paste(df$Date))
mdy_hm(paste(df$Date, "," df$Time))
mdy_hm(paste(df$Date, "," df$Time))
mdy_hm(paste(df$Date, ",", df$Time))
mdy_hms(paste(df$Date, ",", df$Time))
mdy_hm(paste(df$Date, "_", df$Time))
mdy_hm(paste(df$Date, df$Time))
mdy(paste(df$Date, df$Time))
lubridate::hm(df$Time)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
library(dplyr)
urchins <-
# Data were assembled for a tutorial
# at https://www.flutterbys.com.au/stats/tut/tut7.5a.html
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("readr", "broom.mixed", "dotwhisker")
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
